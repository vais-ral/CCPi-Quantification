; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "CCPi (Paraview Plugin)"
#define MyAppVersion "0.1"
#define MyAppPublisher "STFC"
#define MyAppURL "http://ccpforge.cse.rl.ac.uk/gf/project/iqa/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{E852C061-B34D-46D2-AA84-CDA7AB63634D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
DisableDirPage=yes
OutputBaseFilename=CCPi Paraview Plugin(v{#MyAppVersion})
Compression=lzma
SolidCompression=yes
;SetupIconFile=CCPi_Icon.ico
WizardImageFile=CCPi_Logo.bmp
WizardImageStretch=no
WizardSmallImageFile=CCPi_Small_Logo.bmp


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "Paraview\4.1\*"; DestDir: "{code:GetParaviewDirectory}"; check: IsParaviewVersion41 ; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "Paraview\5.2\*"; DestDir: "{code:GetParaviewDirectory}"; check: IsParaviewVersion52 ; Flags: ignoreversion recursesubdirs createallsubdirs

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKLM; Subkey: "SOFTWARE\CCPi\Paraview";ValueType: string; ValueName: "InstallPath"; ValueData: "{code:GetParaviewDirectory}"; Flags: uninsdeletekey

[Code]
var 
  ParaviewVersionPage: TInputOptionWizardPage;
  ParaviewInstallationDirPage: TInputDirWizardPage;

  procedure InitializeWizard;
  begin
   ParaviewVersionPage := CreateInputOptionPage(wpWelcome, 'CCPi Quantification (Paraview) Installer','','Please select you version of Paraview',True,False);
   ParaviewVersionPage.Add('4.1');
   ParaviewVersionPage.Add('5.2');
   ParaviewVersionPage.Values[0] := True;

   ParaviewInstallationDirPage := CreateInputDirPage(ParaviewVersionPage.ID, 'Select Paraview Installation directory','',  'To continue, click Next. If you would like to select a different folder, click Browse.', False,'');
   ParaviewInstallationDirPage.Add('');

   case GetPreviousData('ParaviewVersion', '') of
    '4.1': ParaviewVersionPage.SelectedValueIndex := 0;
   else
    ParaviewVersionPage.SelectedValueIndex := 1;
   end;

   ParaviewInstallationDirPage.Values[0] := GetPreviousData('ParaviewDirectory', '');

  end;

  procedure RegisterPreviousData(PreviousDataKey: Integer);
var
  ParaviewVersion: String;
begin
  { Store the settings so we can restore them next time }
  case ParaviewVersionPage.SelectedValueIndex of
    0: ParaviewVersion := '4.1';
    1: ParaviewVersion := '5.2';
  end;
  SetPreviousData(PreviousDataKey, 'ParaviewVersion', ParaviewVersion);
  SetPreviousData(PreviousDataKey, 'ParaviewDirectory', ParaviewInstallationDirPage.Values[0]);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  I: Integer;
begin
  { Validate certain pages before allowing the user to proceed }
  if CurPageID = ParaviewInstallationDirPage.ID then begin
    if ParaviewInstallationDirPage.Values[0] = '' then
      begin
        MsgBox('You must a valid Paraview Root Directory.', mbError, MB_OK);
        Result := False;
      end
    else if not FileExists( ParaviewInstallationDirPage.Values[0]+'\bin\paraview.exe') then
      begin
        MsgBox('You must a valid Paraview Root Directory.', mbError, MB_OK);
        Result := False;
      end
    else
      Result := True;
  end else
    Result := True;
end;

function GetParaviewDirectory(Param: String): String;
begin
  { Return the selected Installation Directory }
  Result := ParaviewInstallationDirPage.Values[0];
end;

 function GetParaviewVersion(): String;
 var
  ParaviewVersion: String;
begin
  { Return the selected Paraview version }
    case ParaviewVersionPage.SelectedValueIndex of
    0: ParaviewVersion := '4.1';
    1: ParaviewVersion := '5.2';
  end;
  Result := ParaviewVersion;
end;

function IsParaviewVersion41(): Boolean;
begin
Result := False;
if CompareText ( GetParaviewVersion() , '4.1' ) = 0 then begin
  Result := True;
end;  
end;
function IsParaviewVersion52(): Boolean;
begin
Result := False;
if CompareText ( GetParaviewVersion() , '5.2' ) = 0 then begin
  Result := True;
end;  
end;

function ReplaceValue(const FileName, TagName, TagValue: String): Boolean;
var
  I: Integer;
  Tag: string;
  Line: string;
  TagPos: Integer;
  FileLines: TStringList;
begin
  Result := False;
  FileLines := TStringList.Create;
  try
    FileLines.LoadFromFile(FileName);
    for I := 0 to FileLines.Count - 1 do
    begin
      Line := FileLines[I];
      TagPos := Pos(TagName, Line);
      if TagPos > 0 then
      begin
        Result := True;
        Delete(Line, TagPos + Length(Tag), MaxInt);
        FileLines[I] := TagValue;
        FileLines.SaveToFile(FileName);
        Break;
      end;
    end;
  finally
    FileLines.Free;
  end;
end;


function RemoveLineFromFile(const FileName, TagName : String): Boolean;
var
  I: Integer;
  Tag: string;
  Line: string;
  TagPos: Integer;
  FileLines: TStringList;
begin
  Result := False;
  FileLines := TStringList.Create;
  try
    FileLines.LoadFromFile(FileName);
    for I := 0 to FileLines.Count - 1 do
    begin
      Line := FileLines[I];
      TagPos := Pos(TagName, Line);
      if TagPos > 0 then
      begin
        Result := True;
        FileLines.Delete(I);
        FileLines.SaveToFile(FileName);
        Break;
      end;
    end;
  finally
    FileLines.Free;
  end;
end;


function GetInstallDirFromReg() : String;
var
  InstallDir : String ;
begin
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\CCPi\Paraview',
     'InstallPath', InstallDir) then
  begin
    // Successfully read the value 
    Result:=InstallDir;   
  end;  
end;


function RemovePluginAutoLoadFromThePluginFile(Param: String) : String ;
begin
    RemoveLineFromFile( GetInstallDirFromReg()+'\bin\.plugins', '<Plugin name="CCPiAccessibleVolume" auto_load="1"/>');
    RemoveLineFromFile( GetInstallDirFromReg()+'\bin\.plugins', '<Plugin name="CCPiSimpleHistogramThresholding" auto_load="1"/>');
    RemoveLineFromFile( GetInstallDirFromReg()+'\bin\.plugins', '<Plugin name="CCPiLabelQuantification" auto_load="1"/>');
    RemoveLineFromFile( GetInstallDirFromReg()+'\bin\.plugins', '<Plugin name="CCPiNexusReader" auto_load="1"/>');
end;

function AddPluginAutoLoadToThePluginFile(Param: String) : String ;
begin
    ReplaceValue(GetParaviewDirectory('')+'\bin\.plugins', '</Plugins>','<Plugin name="CCPiAccessibleVolume" auto_load="1"/>'+#13#10+'<Plugin name="CCPiSimpleHistogramThresholding" auto_load="1"/>'+#13#10+'<Plugin name="CCPiLabelQuantification" auto_load="1"/>'+#13#10+'<Plugin name="CCPiNexusReader" auto_load="1"/>'); 
    SaveStringToFile(GetParaviewDirectory('')+'\bin\.plugins','</Plugins>',True);    
end;


procedure CurStepChanged(CurStep: TSetupStep);
begin
    if CurStep = ssPostInstall  then
  begin
    AddPluginAutoLoadToThePluginFile('');
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usUninstall  then
  begin
    RemovePluginAutoLoadFromThePluginFile('');
  end;
end;


