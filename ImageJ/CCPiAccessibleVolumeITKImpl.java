/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class CCPiAccessibleVolumeITKImpl {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CCPiAccessibleVolumeITKImpl(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CCPiAccessibleVolumeITKImpl obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CCPiAccessibleVolumeJNI.delete_CCPiAccessibleVolumeITKImpl(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public CCPiAccessibleVolumeITKImpl(CCPiAccessibleVolumeInputImages input, CCPiUserApplicationInterface userAppInterface, short[] outputImage, float sphereDiameterRangeMin, float sphereDiameterRangeMax, int numberOfSpheres, float imageResolution) {
    this(CCPiAccessibleVolumeJNI.new_CCPiAccessibleVolumeITKImpl(CCPiAccessibleVolumeInputImages.getCPtr(input), input, CCPiUserApplicationInterface.getCPtr(userAppInterface), userAppInterface, outputImage, sphereDiameterRangeMin, sphereDiameterRangeMax, numberOfSpheres, imageResolution), true);
  }

  public void Compute() {
    CCPiAccessibleVolumeJNI.CCPiAccessibleVolumeITKImpl_Compute(swigCPtr, this);
  }

  public java.util.Map<Double,Double> GetAccessibleVolume() {
	java.util.Map<Double,Double> result = new java.util.LinkedHashMap<Double,Double>();
	MapType map = new MapType(CCPiAccessibleVolumeJNI.CCPiAccessibleVolumeITKImpl_GetAccessibleVolume(swigCPtr, this),true);
	for(int idx=0;idx<map.size();idx++)
		result.put(map.getKey(idx),map.getValue(idx));
	return result;
}

  public void SetOutputImage(short[] outputImage) {
    CCPiAccessibleVolumeJNI.CCPiAccessibleVolumeITKImpl_SetOutputImage(swigCPtr, this, outputImage);
  }

  public short[] GetOutputImage() {
    return CCPiAccessibleVolumeJNI.CCPiAccessibleVolumeITKImpl_GetOutputImage(swigCPtr, this);
  }

  public CCPiAccessibleVolumeInputImages GetInputImages() {
    long cPtr = CCPiAccessibleVolumeJNI.CCPiAccessibleVolumeITKImpl_GetInputImages(swigCPtr, this);
    return (cPtr == 0) ? null : new CCPiAccessibleVolumeInputImages(cPtr, false);
  }

}
